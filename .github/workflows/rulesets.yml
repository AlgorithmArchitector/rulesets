name: Generating rulesets

on:
  # Позволяет запускать вручную из интерфейса GitHub
  workflow_dispatch:
  # Запускает автоматически каждый день в 00:00 UTC
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write

jobs:
  generate-lists:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout my repo
        uses: actions/checkout@v2
        with:
          path: my_repo

      # --- ОБЩАЯ ПОДГОТОВКА ---
      # Устанавливаем Go один раз для всех последующих шагов, чтобы не делать это трижды.
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Можно указать конкретную версию для стабильности

      # ===================================================================
      #  ШАГ 1: ГЕНЕРАЦИЯ ПРАВИЛ ДЛЯ SING-BOX (.SRS, .LST)
      # ===================================================================

      - name: Checkout generator tool for Sing-box
        uses: actions/checkout@v4
        with:
          repository: Dunamis4tw/generate-geoip-geosite
          path: generate-geoip-geosite

      - name: Create source files for generator
        run: |
          cd generate-geoip-geosite || exit 1
          mkdir -p singbox-inputs

          # Для torrents и antifilter оставляем стандартный метод скачивания через JSON
          cat << EOF > singbox-inputs/torrents.json
          [
            { "url": "https://raw.githubusercontent.com/sakib-m/Pi-hole-Torrent-Blocklist/main/all-torrent-trackers.txt", "contentType": "DefaultList", "category": "torrent_trackers" },
            { "url": "https://raw.githubusercontent.com/sakib-m/Pi-hole-Torrent-Blocklist/main/all-torrent-websites.txt", "contentType": "DefaultList", "category": "torrent_websites" }
          ]
          EOF
          cat << EOF > singbox-inputs/antifilter.json
          [
            { "url": "https://antifilter.download/list/allyouneed.lst", "contentType": "DefaultList", "category": "antifilter_allyouneed" },
            { "url": "https://community.antifilter.download/list/domains.lst", "contentType": "DefaultList", "category": "antifilter_community_domain" },
            { "url": "https://community.antifilter.download/list/community.lst", "contentType": "DefaultList", "category": "antifilter_community_ip" }
          ]
          EOF

      # --- Особый случай для Adaway ---
      # Сервер schakal.ru работает нестабильно со встроенным загрузчиком Go.
      # Поэтому мы скачиваем список надежным wget, а затем передаем его в генератор как локальный файл.
      - name: Prepare and Download adaway list for local processing
        run: |
          cd generate-geoip-geosite || exit 1
          mkdir -p adaway-local-input
          wget -O adaway-local-input/include-domain-adaway.lst "https://schakal.ru/hosts/alive_hosts_mail_fb.txt"

      - name: Generate .srs lists for Sing-box
        run: |
          cd generate-geoip-geosite
          go build .
          
          # Для adaway используем режим локальных файлов (флаг -i)
          ./generate-geoip-geosite -i ./adaway-local-input -o ../my_repo/singbox/adaway --gen-rule-set-srs
          
          # Для остальных - стандартный режим скачивания (флаг -s)
          ./generate-geoip-geosite -s singbox-inputs/torrents.json -i ../my_repo/singbox/torrents -o ../my_repo/singbox/torrents --gen-rule-set-srs
          ./generate-geoip-geosite -s singbox-inputs/antifilter.json -i ../my_repo/singbox/antifilter -o ../my_repo/singbox/antifilter --gen-rule-set-srs
  
      - name: Set update timestamp
        id: date
        run: |
          echo "DATE=$(TZ=Europe/Moscow date +'%d.%m.%Y %H:%M')" >> $GITHUB_ENV

      - name: Commit and push changes to SINGBOX folder
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Action"
          author_email: "action@github.com"
          message: "Updated ${{ env.DATE }}"
          add: "singbox"
          cwd: "./my_repo"

      # ===================================================================
      #  ШАГ 2: ГЕНЕРАЦИЯ ФАЙЛОВ ДОМЕНОВ ДЛЯ XRAY (GEOSITE .DAT)
      # ===================================================================

      - name: Checkout geosite generator tool for Xray
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: v2ray-geosite

      - name: Build geosite .dat files for Xray
        run: |
          cd v2ray-geosite
          # Используем .lst файлы, сгенерированные на ШАГЕ 1, как источник данных
          cp ../my_repo/singbox/adaway/include-domain-adaway.lst ./input/adaway.lst
          cp ../my_repo/singbox/torrents/include-domain-torrent_trackers.lst ./input/torrent_trackers.lst
          cp ../my_repo/singbox/torrents/include-domain-torrent_websites.lst ./input/torrent_websites.lst
          cp ../my_repo/singbox/antifilter/include-domain-antifilter_community_domain.lst ./input/antifilter_community_domain.lst

          go run main.go --datapath=./input --outputdir=../my_repo/xray/
          # Старая логика с раздельными папками и вызовами была избыточна, этот инструмент может обработать все сразу.

      - name: Commit and push GEOSITE changes to XRAY folder
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Action"
          author_email: "action@github.com"
          message: "Updated ${{ env.DATE }}"
          add: "xray"
          cwd: "./my_repo"
    
      # ===================================================================
      #  ШАГ 3: ГЕНЕРАЦИЯ ФАЙЛОВ IP-АДРЕСОВ ДЛЯ XRAY (GEOIP .DAT)
      # ===================================================================

      - name: Checkout geoip generator tool for Xray
        uses: actions/checkout@v4
        with:
          repository: v2fly/geoip
          path: v2ray-geoip 

      - name: Create source config for geoip generator
        run: |
          cd v2ray-geoip
          cat << EOF > config.json
          {
            "input": [
              { "type": "text", "action": "add", "args": { "name": "antifilter_allyouneed_ip", "uri": "https://antifilter.download/list/allyouneed.lst" } },
              { "type": "text", "action": "add", "args": { "name": "antifilter_community_ip", "uri": "https://community.antifilter.download/list/community.lst" } }
            ],
            "output": [
              { "type": "v2rayGeoIPDat", "action": "output", "args": { "outputName": "antifilter_allyouneed_ip.dat", "wantedList": ["antifilter_allyouneed_ip"], "outputDir": "../my_repo/xray/antifilter" } },
              { "type": "v2rayGeoIPDat", "action": "output", "args": { "outputName": "antifilter_community_ip.dat", "wantedList": ["antifilter_community_ip"], "outputDir": "../my_repo/xray/antifilter" } }
            ]
          }
          EOF

      - name: Build geoip .dat files for Xray
        run: |
          cd v2ray-geoip
          go run ./

      - name: Commit and push GEOIP changes to XRAY folder
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Action"
          author_email: "action@github.com"
          message: "Updated ${{ env.DATE }}"
          add: "xray"
          cwd: "./my_repo"

      # ===================================================================
      #  ШАГ 4: УВЕДОМЛЕНИЕ ОБ ОШИБКАХ
      # ===================================================================
      - name: Send notification to Telegram on failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ERROR on “rule set generation”
            Repository: ${{ github.repository }}
